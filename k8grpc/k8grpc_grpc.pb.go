// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package k8grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// K8ServiceClient is the client API for K8Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8ServiceClient interface {
	GetPods(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PodList, error)
	GetDeployments(ctx context.Context, in *Request, opts ...grpc.CallOption) (*DeploymentList, error)
	GetServices(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ServiceList, error)
	GetSecrets(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SecretList, error)
}

type k8ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8ServiceClient(cc grpc.ClientConnInterface) K8ServiceClient {
	return &k8ServiceClient{cc}
}

func (c *k8ServiceClient) GetPods(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PodList, error) {
	out := new(PodList)
	err := c.cc.Invoke(ctx, "/k8grpc.K8service/GetPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8ServiceClient) GetDeployments(ctx context.Context, in *Request, opts ...grpc.CallOption) (*DeploymentList, error) {
	out := new(DeploymentList)
	err := c.cc.Invoke(ctx, "/k8grpc.K8service/GetDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8ServiceClient) GetServices(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ServiceList, error) {
	out := new(ServiceList)
	err := c.cc.Invoke(ctx, "/k8grpc.K8service/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8ServiceClient) GetSecrets(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SecretList, error) {
	out := new(SecretList)
	err := c.cc.Invoke(ctx, "/k8grpc.K8service/GetSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8ServiceServer is the server API for K8Service service.
// All implementations must embed UnimplementedK8ServiceServer
// for forward compatibility
type K8ServiceServer interface {
	GetPods(context.Context, *Request) (*PodList, error)
	GetDeployments(context.Context, *Request) (*DeploymentList, error)
	GetServices(context.Context, *Request) (*ServiceList, error)
	GetSecrets(context.Context, *Request) (*SecretList, error)
	mustEmbedUnimplementedK8ServiceServer()
}

// UnimplementedK8ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedK8ServiceServer struct {
}

func (UnimplementedK8ServiceServer) GetPods(context.Context, *Request) (*PodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPods not implemented")
}
func (UnimplementedK8ServiceServer) GetDeployments(context.Context, *Request) (*DeploymentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployments not implemented")
}
func (UnimplementedK8ServiceServer) GetServices(context.Context, *Request) (*ServiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedK8ServiceServer) GetSecrets(context.Context, *Request) (*SecretList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecrets not implemented")
}
func (UnimplementedK8ServiceServer) mustEmbedUnimplementedK8ServiceServer() {}

// UnsafeK8ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8ServiceServer will
// result in compilation errors.
type UnsafeK8ServiceServer interface {
	mustEmbedUnimplementedK8ServiceServer()
}

func RegisterK8ServiceServer(s grpc.ServiceRegistrar, srv K8ServiceServer) {
	s.RegisterService(&K8Service_ServiceDesc, srv)
}

func _K8Service_GetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8ServiceServer).GetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8grpc.K8service/GetPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8ServiceServer).GetPods(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8Service_GetDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8ServiceServer).GetDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8grpc.K8service/GetDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8ServiceServer).GetDeployments(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8Service_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8ServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8grpc.K8service/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8ServiceServer).GetServices(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8Service_GetSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8ServiceServer).GetSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/k8grpc.K8service/GetSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8ServiceServer).GetSecrets(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// K8Service_ServiceDesc is the grpc.ServiceDesc for K8Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "k8grpc.K8service",
	HandlerType: (*K8ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPods",
			Handler:    _K8Service_GetPods_Handler,
		},
		{
			MethodName: "GetDeployments",
			Handler:    _K8Service_GetDeployments_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _K8Service_GetServices_Handler,
		},
		{
			MethodName: "GetSecrets",
			Handler:    _K8Service_GetSecrets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8grpc/k8grpc.proto",
}
